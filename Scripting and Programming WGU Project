Class.py

import requests

# Creating a Class to retrieve the weather data.

class WeatherData:
    def __init__(self, latitude, longitude, month, day, years):
        self.latitude = latitude
        self.longitude = longitude
        self.month = month
        self.day = day
        self.years = years

        # Five year data will be calculated later. Set to None for now.
        self.avg_temp = None
        self.min_temp = None
        self.max_temp = None

        self.avg_wind_speed = None
        self.min_wind_speed = None
        self.max_wind_speed = None

        self.sum_precipitation = None
        self.min_precipitation = None
        self.max_precipitation = None

    # Making a single API request for weather variables for the past five years.

    def fetch_weather_data(self):
        years_data = []
        for year in self.years:
            url = (f"https://archive-api.open-meteo.com/v1/archive?"
                   f"latitude={self.latitude}&longitude={self.longitude}"
                   f"&start_date={year}-{self.month:02d}-{self.day:02d}"
                   f"&end_date={year}-{self.month:02d}-{self.day:02d}"
                   f"&daily=temperature_2m_mean,wind_speed_10m_max,precipitation_sum"
                   f"&temperature_unit=fahrenheit&wind_speed_unit=mph"
                   f"&precipitation_unit=inch&timezone=America/New_York"
                   )
            response = requests.get(url)

            if response.status_code == 200:
                data = response.json()

                print(f"Data for {year}: {data}")

                # Storing the daily data for each year on a dictionary.
                daily_data = {
                    "year": year,
                    "mean_temperature": data['daily']['temperature_2m_mean'][0],
                    "max_wind_speed": data['daily']['wind_speed_10m_max'][0],
                    "precipitation_sum": data['daily']['precipitation_sum'][0]
                }
                years_data.append(daily_data)
            else:
                print(f"Failed to retrieve data for {year}: {response.status_code}")

        return years_data

    # Second method to retrieve the mean temperature in Fahrenheit.

    def get_mean_temp(self):
        weather_data = self.fetch_weather_data()
        return [(year_data["year"], year_data["mean_temperature"]) for year_data in weather_data]

    # Third method to retrieve the max wind speed in miles per hour.

    def get_max_wind_speed(self):
        weather_data = self.fetch_weather_data()
        return [(year_data["year"], year_data["max_wind_speed"]) for year_data in weather_data]

    # Fourth method to retrieve the precipitation sum in inches.

    def get_sum_precipitation(self):
        weather_data = self.fetch_weather_data()
        return [(year_data["year"], year_data["precipitation_sum"]) for year_data in weather_data]


Main.py

# Importing all necessary tools from SQLAlchemy to interact with the database that will be created.
from sqlalchemy import create_engine, Column, Integer, Float
from sqlalchemy.orm import declarative_base, sessionmaker

# Importing the WeatherData class from Class.py.
from Class import WeatherData

# Importing SQLite3
import sqlite3
from tabulate import tabulate

# Location and date chosen: Charlottesville, VA on January 26th, years 2020 to 2024
latitude = 38.0293
longitude = -78.4767
month = 1  # January
day = 26
years = [2020, 2021, 2022, 2023, 2024]

# Creating an instance of the WeatherData class.
weather = WeatherData(latitude=latitude, longitude=longitude, month=month, day=day, years=years)
weather_by_year = weather.fetch_weather_data()

base = declarative_base()


# Creating a second class (WeatherRecord) that builds a table in SQLite.
class WeatherRecord(base):
    __tablename__ = 'weather_data'

    id = Column(Integer, primary_key=True, autoincrement=True)
    latitude = Column(Float, nullable=False)
    longitude = Column(Float, nullable=False)
    month = Column(Integer, nullable=False)
    day = Column(Integer, nullable=False)
    years = Column(Integer, nullable=False)

    # Weather data.
    avg_temp = Column(Float)
    min_temp = Column(Float)
    max_temp = Column(Float)
    avg_wind_speed = Column(Float)
    min_wind_speed = Column(Float)
    max_wind_speed = Column(Float)
    precipitation_sum = Column(Float)
    min_precipitation = Column(Float)
    max_precipitation = Column(Float)


# Creating the SQLite engine and table.
engine = create_engine('sqlite:///weather_data.db')
base.metadata.drop_all(engine)  # Drop table if it exists.
base.metadata.create_all(engine)  # Recreate table.

# Create a session.
Session = sessionmaker(bind=engine)
session = Session()

# Insert weather data for each year into the database.
for year_data in weather_by_year:
    record = WeatherRecord(
        latitude=latitude,
        longitude=longitude,
        month=month,
        day=day,
        years=year_data['year'],
        avg_temp=year_data['mean_temperature'],
        min_temp=year_data['mean_temperature'],
        max_temp=year_data['mean_temperature'],
        avg_wind_speed=year_data['max_wind_speed'],
        min_wind_speed=year_data['max_wind_speed'],
        max_wind_speed=year_data['max_wind_speed'],
        precipitation_sum=year_data['precipitation_sum'],
        min_precipitation=year_data['precipitation_sum'],
        max_precipitation=year_data['precipitation_sum']
    )
    session.add(record)

session.commit()
session.close()

print("Weather data inserted successfully into the database.")


# Defining method to query the table.

def query_weather_data(latitude, longitude, month, day):
    # Connecting to SQLite database.
    connection = sqlite3.connect('weather_data.db')
    cursor = connection.cursor()

    # SQL query to retrieve the data for Charlottesville, VA on January 26th.
    query = f"""
    SELECT * FROM weather_data
    WHERE latitude = ? AND longitude = ?
    AND month = ? AND day = ?
    ORDER BY years ASC
    ;
    """

    cursor.execute(query, (latitude, longitude, month, day))
    rows = cursor.fetchall()

    # Defining table headers.

    if rows:
        headers = ["Month", "Day", "Year", "Avg Temp (°F)", "Min Temp (°F)", "Max Temp (°F)", "Avg Wind Speed (mph)",
                   "Min Wind Speed (mph)", "Max Wind Speed (mph)", "Precipitation (inches)"
                   ]

        # Formatting the data into a table.
        table_data = []
        for row in rows:
            table_data.append([
                row[3],  # Month
                row[4],  # Day
                row[5],  # Year
                row[6],  # Avg Temp
                row[7],  # Min Temp
                row[8],  # Max Temp
                row[9],  # Avg Wind Speed
                row[10],  # Min Wind Speed
                row[11],  # Max Wind Speed
                row[12]  # Precipitation
            ])

        print(tabulate(table_data, headers=headers, tablefmt="grid"))

    else:
        print("No data found for the specified location and date.")

    cursor.close()
    connection.close()


# Calling the query function to display the data.
query_weather_data(latitude, longitude, month, day)
